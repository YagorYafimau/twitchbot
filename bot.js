const { Telegraf, Markup } = require('telegraf');
const fs = require('fs');  // –î–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π

const bot = new Telegraf('7695014969:AAGql5j-NLxvRU_G50idM6Fm92GCTn-oB8s');

// –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const users = new Map();
const channels = []; // –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ —Å —Å—Å—ã–ª–∫–æ–π –∏ ownerId

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞
function loadStats() {
    try {
        const data = fs.readFileSync('stats.json');
        return JSON.parse(data);
    } catch (error) {
        // –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ —Å –Ω–∞—á–∞–ª—å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
        return { "users": 0, "messages": 0 };
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ —Ñ–∞–π–ª
function saveStats(stats) {
    fs.writeFileSync('stats.json', JSON.stringify(stats, null, 2));
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞
let stats = loadStats();

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
bot.start((ctx) => {
    const userId = ctx.from.id;

    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    stats.users++;
    saveStats(stats);

    // –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø—Ä–∏—Å–ª–∞–ª —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª
    if (!users.has(userId)) {
        ctx.reply(
            '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à Twitch –∫–∞–Ω–∞–ª üì∫',
            Markup.removeKeyboard()
        );
    } else {
        ctx.reply('–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –ù–∞–∂–º–∏—Ç–µ "–ù–∞—á–∞—Ç—å –ø–æ–¥–ø–∏—Å—ã–≤–∞—Ç—å—Å—è" –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.');
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞
bot.on('text', (ctx) => {
    const userId = ctx.from.id;
    const message = ctx.message.text;

    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
    stats.messages++;
    saveStats(stats);

    if (!users.has(userId)) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ Twitch –∫–∞–Ω–∞–ª
        users.set(userId, { twitch: message, subscribed: [], step: 0 });
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–Ω–∞–ª –≤ —Å–ø–∏—Å–æ–∫
        channels.push({ link: message, ownerId: userId });

        ctx.reply(
            '–°—Å—ã–ª–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞! –ü–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ –Ω–∞—á–∞—Ç—å, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –º–æ–π Twitch –∫–∞–Ω–∞–ª üíñ',
            Markup.inlineKeyboard([ 
                Markup.button.url('–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è üíú', 'https://www.twitch.tv/innkomaf16'),
                Markup.button.callback('–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É ‚úÖ', 'check_subscription')
            ])
        );
    } else {
        ctx.reply('–í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Å–≤–æ—é —Å—Å—ã–ª–∫—É. –ù–∞–∂–º–∏—Ç–µ "–ù–∞—á–∞—Ç—å –ø–æ–¥–ø–∏—Å—ã–≤–∞—Ç—å—Å—è"!'); 
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"
bot.action('check_subscription', (ctx) => {
    const userId = ctx.from.id;
    const user = users.get(userId);

    if (user.step === 0) {
        // –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å 80% –¥–ª—è –Ω–µ—É–¥–∞—á–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ (–ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
        const isFailure = Math.random() < 0.8;
        
        if (isFailure) {
            user.step = 1;  // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
            ctx.reply(
                '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É, —É–±–µ–¥–∏—Å—å —á—Ç–æ —Ç—ã –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –∏ –ø—Ä–æ–≤–µ—Ä—å –µ—â–µ —Ä–∞–∑! üíñ',
                Markup.inlineKeyboard([ 
                    Markup.button.callback('–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—â–µ —Ä–∞–∑ ‚úÖ', 'check_subscription_retry')
                ])
            );
        } else {
            user.step = 2;  // –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ —Å—Ä–∞–∑—É
            ctx.reply(
                '–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –ø–æ–¥–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –Ω–∞ –¥—Ä—É–≥–∏–µ Twitch –∫–∞–Ω–∞–ª—ã. –ù–∞–∂–º–∏—Ç–µ "–ù–∞—á–∞—Ç—å –ø–æ–¥–ø–∏—Å—ã–≤–∞—Ç—å—Å—è" üèÉ‚Äç‚ôÇÔ∏è',
                Markup.inlineKeyboard([ 
                    Markup.button.callback('–ù–∞—á–∞—Ç—å –ø–æ–¥–ø–∏—Å—ã–≤–∞—Ç—å—Å—è üì∫', 'start_subscribing')
                ])
            );
        }
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—â–µ —Ä–∞–∑"
bot.action('check_subscription_retry', (ctx) => {
    const userId = ctx.from.id;
    const user = users.get(userId);

    if (user.step === 1) {
        user.step = 2;  // –ù–∞ –≤—Ç–æ—Ä–æ–º —à–∞–≥–µ –ø–æ–¥–ø–∏—Å–∫–∞ –≤—Å–µ–≥–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç—Å—è
        ctx.reply(
            '–ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! üôå',
            Markup.inlineKeyboard([ 
                Markup.button.callback('–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –µ—â–µ üëâ', 'start_subscribing'),
                Markup.button.callback('–ü—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å üö´', 'stop')
            ])
        );
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–∞—á–∞—Ç—å –ø–æ–¥–ø–∏—Å—ã–≤–∞—Ç—å—Å—è"
bot.action('start_subscribing', (ctx) => {
    const userId = ctx.from.id;
    const user = users.get(userId);

    if (!user) {
        ctx.reply('–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à Twitch –∫–∞–Ω–∞–ª üì∫');
        return;
    }

    // –ù–∞—Ö–æ–¥–∏–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
    const availableChannels = channels.filter(
        (channel) => channel.ownerId !== userId && !user.subscribed.includes(channel.link)
    );

    if (availableChannels.length === 0) {
        ctx.reply(
            '–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ ‚è≥',
            Markup.inlineKeyboard([ 
                Markup.button.callback('–•–æ—Ä–æ—à–æ üôÇ', 'ready_to_subscribe')
            ])
        );
    } else {
        const channel = availableChannels[0];
        ctx.reply(
            `–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª: ${channel.link} üëâ`,
            Markup.inlineKeyboard([ 
                Markup.button.callback(`–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É ‚úÖ`, `confirm_${channel.link}`)
            ])
        );
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ì–æ—Ç–æ–≤—ã –ø–æ–¥–ø–∏—Å—ã–≤–∞—Ç—å—Å—è?"
bot.action('ready_to_subscribe', (ctx) => {
    ctx.reply(
        '–ì–æ—Ç–æ–≤—ã –ø–æ–¥–ø–∏—Å—ã–≤–∞—Ç—å—Å—è? Let‚Äôs go! üèÉ‚Äç‚ôÇÔ∏è',
        Markup.inlineKeyboard([ 
            Markup.button.callback('–ù–∞—á–∞—Ç—å –ø–æ–¥–ø–∏—Å—ã–≤–∞—Ç—å—Å—è üì∫', 'start_subscribing')
        ])
    );
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
bot.action(/confirm_.+/, (ctx) => {
    const userId = ctx.from.id;
    const channelLink = ctx.match[0].replace('confirm_', '');

    const user = users.get(userId);
    if (!user) {
        ctx.reply('–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à Twitch –∫–∞–Ω–∞–ª üì∫');
        return;
    }

    // –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å 15% –¥–ª—è –Ω–µ—É–¥–∞—á–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
    const isFailure = Math.random() < 0.15;
    if (isFailure) {
        ctx.reply(
            '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞! üíñ',
            Markup.inlineKeyboard([ 
                Markup.button.callback(`–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—â–µ —Ä–∞–∑ ‚úÖ`, `confirm_retry_${channelLink}`)
            ])
        );
    } else {
        user.subscribed.push(channelLink);
        ctx.reply(
            '–ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! üôå',
            Markup.inlineKeyboard([ 
                Markup.button.callback('–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –µ—â–µ üëâ', 'start_subscribing'),
                Markup.button.callback('–ü—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å üö´', 'stop')
            ])
        );
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—â–µ —Ä–∞–∑" –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
bot.action(/confirm_retry_.+/, (ctx) => {
    const userId = ctx.from.id;
    const channelLink = ctx.match[0].replace('confirm_retry_', '');

    const user = users.get(userId);
    if (!user) {
        ctx.reply('–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à Twitch –∫–∞–Ω–∞–ª üì∫');
        return;
    }

    // –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç—Å—è –Ω–∞ –≤—Ç–æ—Ä–æ–º —à–∞–≥–µ –≤—Å–µ–≥–¥–∞
    user.subscribed.push(channelLink);
    ctx.reply(
        '–ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! üôå',
        Markup.inlineKeyboard([ 
            Markup.button.callback('–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –µ—â–µ üëâ', 'start_subscribing'),
            Markup.button.callback('–ü—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å üö´', 'stop')
        ])
    );
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å"
bot.action('stop', (ctx) => {
    ctx.reply('–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞! –ù–∞–∂–º–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ. üöÄ');
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.launch().then(() => {
    console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!');
});

process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));
